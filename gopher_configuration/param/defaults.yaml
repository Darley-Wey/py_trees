##############################################################################
# About
##############################################################################

# Basic idea is to use this to feed gopher behaviours with the correct
# names/topics for your robot so that you don't have to 1) hardcode everything
# or 2) do massive amounts of params/remaps in launchers. It also lets
# you conveniently standardise various ideas.

##############################################################################
# Names
##############################################################################
topics:
  diagnostics: /diagnostics
  display_notification: /gopher/status_notifier/display_notification
  initial_pose: /navi/initial_pose
  switch_map: /dslam/map/switch
  world: /navi/world

services:
  clear_costmaps: /navi/move_base/clear_costmaps
  delivery: /rocon/delivery
  door_operator: /concert/door_operator

actions:
  teleport: /navi/teleport
  move_base: /navi/move_base
  autonomous_docking: /gopher/autonomous_docking
  simple_motion_controller: /gopher/simple_motion_controller

namespaces:
  semantics: /rocon/semantics

frames:
  map: map

##############################################################################
# Devices
##############################################################################

# name describes the state in which the battery is when below the given value.
battery:
  low: 10
  mid: 80

##############################################################################
# Interactions
##############################################################################

# Button aliases standardised for gopher deliveries,
buttons:
  go:   /gopher/buttons/go
  stop: /gopher/buttons/stop

# Sound aliases standardised for gopher deliveries,
# system wide aliases should be specified above. 
sounds:
  honk: /gopher/commands/sounds/groot
  teleport: /gopher/commands/sounds/teleport
  done: /gopher/commands/sounds/yawn

##############################################################################
# Patterns
##############################################################################
#
# LED Patterns are one set of configurations that can't yet be configured
# from yaml. These however are done in the interface:
#
#    python: gopher_configuration.configurations.Configuration
#    c++   : N/A
#
# For reference, *concepts* are:
#
#  - human interaction required : flashing
#  - notifications              : around
#  - states                     : solid
#
# and *core definitions*: 
#
# human interactions - where we require the human to *do something*. An obvious
# interactions are when the user has to press a button on the robot, whereas
# a more passive interaction would require the human to simply give the robot space
# (e.g. be careful around it because it is making a reversing maneuvre)
#
#  - humans_give_me_input = gopher_std_msgs.Notification.FLASH_BLUE
#  - humans_be_careful = gopher_std_msgs.Notification.FLASH_YELLOW
#  - humans_i_need_help = gopher_std_msgs.Notification.FLASH_PURPLE
#  - humans_fix_me_i_am_broken = gopher_std_msgs.Notification.FLASH_RED
#
# notifications - just to show what's going on, in case someone cares
#
#  - holding = gopher_std_msgs.Notification.AROUND_RIGHT_BLUE
#
# states
#
#  - battery full = gopher_std_msgs.Notification.SOLID_BLUE
#  - battery mid  = gopher_std_msgs.Notification.SOLID_GREEN
#  - battery low  = gopher_std_msgs.Notification.SOLID_YELLOW
#  - error        = gopher_std_msgs.Notification.SOLID_RED
