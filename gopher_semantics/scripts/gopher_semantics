#!/usr/bin/env python
#
# License: Yujin
#
##############################################################################
# Documentation
##############################################################################
"""
Runtime global script that prints the current runtime semantics
"""
##############################################################################
# Imports
##############################################################################

import argparse
import gopher_configuration
import os
import rocon_console.console as console
import rospkg
import rospy
import sys

# Move the current directory to the end so it won't clash with python modules
# of the same name.
sys.path.append(sys.path.pop(0))
import gopher_semantics

##############################################################################
# Command Handler
##############################################################################


def show_usage():
    s = "\n"
    s += console.cyan + "        gopher_semantics" + console.yellow + " [<args>]" + console.reset + "\n"
    s += "\n"
    return s


def parse_arguments(command_line_args):
    parser = argparse.ArgumentParser(description=console.green + 'Introspect the current gopher semantics configuration!' + console.reset,
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.RawTextHelpFormatter
                                     )
    parser.add_argument('-w', '--worlds', action='store_true', help='list available worlds')
    parser.add_argument('-e', '--elevators', action='store_true', help='list available elevators')
    parser.add_argument('-l', '--locations', action='store_true', help='list available locations')
    parser.add_argument('-d', '--docking_stations', action='store_true', help='list available docking stations')
    parser.add_argument('--list', action='store_true', help='list available semantics in your workspace.')
    parser.add_argument('--load', action='store', default=None, help='load semantics from this file instead (use with --list).')
    parser.add_argument('-n', '--namespace', action='store', default=None, help='manually specify the namespace on the rosparam server.')

    args = parser.parse_args(command_line_args)
    return (parser, args)


def get_semantic_yaml_files():
    files = {}
    rospack = rospkg.RosPack()
    semantics_dir = os.path.join(rospack.get_path('gopher_semantics'), 'param')
    for (unused_dirpath, unused_dirnames, filenames) in os.walk(semantics_dir):
        for filename in filenames:
            name, unused_extension = os.path.splitext(os.path.basename(filename))
            files[name] = os.path.join(semantics_dir, filename)
    return files

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    (parser, args) = parse_arguments(command_line_args)

    if args.list:
        files = get_semantic_yaml_files()
        print(console.bold + "\nSemantic Yamls\n" + console.reset)
        for name in files.keys():
            print("  -- " + console.cyan + name + console.reset)
        print("")
        sys.exit(0)
    elif args.load is not None:
        ##########################################################
        # From File in gohper_semantics
        ##########################################################
        files = get_semantic_yaml_files()
        if args.load not in files.keys():
            print(console.red + "ERROR : '%s' not available (check with --list)." % args.load)
            parser.print_help()
            sys.exit(1)
        semantics = gopher_semantics.Semantics(from_yaml=files[args.load])
    else:
        ##########################################################
        # From Ros Param Server
        ##########################################################
        rospy.init_node("gopher_semantics", log_level=rospy.INFO)
        if args.namespace is None:
            gopher = gopher_configuration.Configuration()
            args.namespace = gopher.namespaces.semantics
        semantics = gopher_semantics.Semantics(semantics_parameter_namespace=args.namespace)

    if args.worlds:
        print("%s" % semantics.worlds)
    elif args.locations:
        print("%s" % semantics.locations)
    elif args.elevators:
        print("%s" % semantics.elevators)
    elif args.docking_stations:
        print("%s" % semantics.docking_stations)
    else:
        print("%s" % semantics)
