#!/usr/bin/env python
#
# License: Yujin
#
##############################################################################
# Documentation
##############################################################################
"""
Runtime global script that prints the current runtime semantics
"""
##############################################################################
# Imports
##############################################################################

import sys

# Move the current directory to the end so it won't clash with python modules
# of the same name.
sys.path.append(sys.path.pop(0))

import argparse
import gopher_configuration
import gopher_semantics
import rocon_console.console as console
import rospy

##############################################################################
# Command Handler
##############################################################################


def show_usage():
    s = "\n"
    s += console.cyan + "        gopher_semantics" + console.yellow + " [<args>]" + console.reset + "\n"
    s += "\n"
    return s


class WhipMe(object):
    def __init__(self, command_line_args):

        self.gopher = gopher_configuration.Configuration()

        # switch to the rosbag style heirarchical format
        parser = argparse.ArgumentParser(description=console.green + 'Teleport around the world with marco polo!' + console.reset,
                                         usage=show_usage(),
                                         epilog="And his noodly appendage reached forth to tickle the blessed...",
                                         formatter_class=argparse.RawTextHelpFormatter
                                         )
        parser.add_argument('-w', '--worlds', action='store_true', help='list available worlds')
        parser.add_argument('-e', '--elevators', action='store_true', help='list available elevators')
        parser.add_argument('-l', '--locations', action='store_true', help='list available locations')
        parser.add_argument('-d', '--docking_stations', action='store_true', help='list available docking stations')
        parser.add_argument('-n', '--namespace', action='store', default=self.gopher.namespaces.semantics, help='namespace for the semantics parameters.')

        args = parser.parse_args(command_line_args)

        self.args = args
        self.semantics = gopher_semantics.Semantics(semantics_parameter_namespace=args.namespace)

        if args.worlds:
            print("%s" % self.semantics.worlds)
        elif args.locations:
            print("%s" % self.semantics.locations)
        elif args.elevators:
            print("%s" % self.semantics.elevators)
        elif args.docking_stations:
            print("%s" % self.semantics.docking_stations)
        else:
            print("%s" % self.semantics)


##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    rospy.init_node("gopher_teleport", log_level=rospy.INFO)
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    whip_me = WhipMe(command_line_args)
