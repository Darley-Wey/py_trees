#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/stonier/py_trees_suite/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################
"""
Simple test program for understanding class decorators better.
"""
##############################################################################
# Imports
##############################################################################

##############################################################################
# Methods
##############################################################################


def complement(cls):
    class NewClass(object):
        def __init__(self, *args, **kwargs):
            self.original = cls(*args, **kwargs)

        def __getattribute__(self, s):
            """
            this is called whenever any attribute of a NewClass object is accessed. This function first tries to
            get the attribute off NewClass. If it fails then it tries to fetch the attribute from self.oInstance (an
            instance of the decorated class). If it manages to fetch the attribute from self.oInstance, and
            the attribute is an instance method then `time_this` is applied.
            """
            try:
                x = super(NewClass, self).__getattribute__(s)
                return x
            except AttributeError:
                pass
            x = self.original.__getattribute__(s)
            if s == "status":
                return not x
            else:
                return x
    return NewClass


class Foo(object):
    def __init__(self, name):
        self.name = name
        self.status = False
        print("Foo: %s" % self.status)

    def angry(self):
        old_status = self.status
        self.status = True
        print("Foo: %s->%s!" % (old_status, self.status))


##############################################################################
# Main
##############################################################################

# Monky patching a class with another classes' method - this will use that
# other classes variables.

if __name__ == '__main__':
    FooComplement = complement(Foo)
    # inverted_foo = FooComplement(name="foo")
    inverted_foo = complement(Foo)(name="foo")
    print("FooComplement: %s" % inverted_foo.status)
    inverted_foo.angry()
    print("FooComplement: %s" % inverted_foo.status)

