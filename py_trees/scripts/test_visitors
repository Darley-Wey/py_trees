#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/yujinrobot/gopher_crazy_hospital/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################
"""
Simple test program for py trees
"""
##############################################################################
# Imports
##############################################################################

import rospy

##############################################################################
# Methods
##############################################################################


class Behaviour:
    def __init__(self, name):
        self.name = name

    def tick(self):
        print("  %s: tick" % self.name)
        yield self

    def __repr__(self):
        return self.name


class Selector():
    def __init__(self, name, children=[Behaviour("Foo"), Behaviour("Bar")]):
        self.name = name
        self.children = children
        print("Children: %s" % self.children)

    def tick(self):
        print("Selector: tick")
        for child in self.children:
            for node in child.tick():
                yield node
                if node.name == "AmIBar":
                    return


class Sequence:
    def __init__(self, name, children=[Behaviour("Foo"), Behaviour("Bar")]):
        self.name = name
        self.children = children
        print("Children: %s" % self.children)

    def tick(self):
        print("Sequence: tick")
        for child in self.children:
            for node in child.tick():
                yield node

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    selector = Selector(name="Selector", children=[Behaviour("AmIFoo"), Behaviour("AmIBar"), Behaviour("AmIFooBar")])
    sub_sequence = Sequence(name="Subsequence", children=[Behaviour("SubFoo"), Behaviour("SubBar")])
    tree = Sequence(name="Sequence", children=[Behaviour("Foo"), selector, sub_sequence, Behaviour("Bar")])
    for node in tree.tick():
        print("    Visited '%s'" % node.name)
