#!/usr/bin/env python
#
# scripts/demo_tree
#
# License: BSD
#   https://raw.github.com/stonier/py_trees_suite/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################
"""
Simple demo program for py trees
"""
##############################################################################
# Imports
##############################################################################

import functools
import py_trees

##############################################################################
# Classes
##############################################################################


def show_usage(root):
    print("")
    print("************************************************************************************")
    print("                                 '%s'" % root.name)
    print("************************************************************************************")
    print("")
    print("TREE")
    print("")
    py_trees.display.print_ascii_tree(root)
    print("")
    print("EVENTS")
    print("")
    print(" - 3 : sequence switches from running to success")
    print(" - 4 : selector's first child flicks to success once only")
    print(" - 8 : the fallback idler kicks in as everything else fails")
    print(" -14 : the first child kicks in again, aborting a running sequence behind it")
    print("")
    print("************************************************************************************")
    print("")


##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    every_n_success = py_trees.behaviours.SuccessEveryN("EveryN", 5)

    sequence = py_trees.Sequence(name="Sequence")
    guard = py_trees.behaviours.Success("Guard")
    periodic_success = py_trees.behaviours.Periodic("Periodic", 3)
    finisher = py_trees.behaviours.Success("Finisher")
    sequence.add_child(guard)
    sequence.add_child(periodic_success)
    sequence.add_child(finisher)
    sequence.blackbox_level = py_trees.common.BlackBoxLevel.COMPONENT

    idle = py_trees.behaviours.Success("Idle")

    root = py_trees.Selector(name="Demo Tree")
    root.add_child(every_n_success)
    root.add_child(sequence)
    root.add_child(idle)

    py_trees.demos.main(root, functools.partial(show_usage, root))
