#!/usr/bin/env python
#
# License: Yujin
#
#
##############################################################################
# Documentation
##############################################################################
"""
Simple utility to watch and display items from Blackboard
"""
##############################################################################
# Imports
##############################################################################

from py_trees_msgs.srv import BlackboardVariables, SubBlackboardWatch
import argparse
import rospy
import rocon_console.console as console
import sys
import std_msgs.msg as std_msgs
from rosservice import rosservice_find
from bondpy import bondpy


##############################################################################
# Command Handler
##############################################################################


def show_usage():
    s = "\n"
    s += console.bold + "    Introspection" + console.reset + "\n"
    s += console.cyan + "        blackboard_watcher" + console.yellow + " [option]" + console.reset + "\n"
    s += "\n"
    s += "        where the option is one of:\n"
    s += console.cyan + "        -l, --list_variables         " + console.yellow + "list variables in the blackboard." + console.reset + "\n"
    s += console.cyan + "        -n, --namespace              " + console.yellow + "namespace of blackboard services." + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Command" + console.reset + "\n"
    s += console.cyan + "        blackboard_watcher" + console.blue + console.bold + " [<variables>]" + console.reset + "\n"
    s += "\n"
    s += "        where the command is one of:\n"
    s += console.blue + console.bold + "        [<variables>]            " + console.reset + console.yellow + "watch specified variables." + console.reset + "\n"
    s += "\n"
    return s


def show_description():
    s = ""
    s += console.green + "Watch and log the blackboard!" + console.reset
    return s


def parse_arguments(command_line_args):
    parser = argparse.ArgumentParser(description=show_description(),
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.RawTextHelpFormatter
                                     )
    parser.add_argument('-l', '--list_variables', action='store_true', default=None, help='list variables in the blackboard.')
    parser.add_argument('-n', '--namespace', nargs='?', default=None, help='namespace of blackboard services.')
    parser.add_argument('command', nargs=argparse.REMAINDER, default=None, help='subcommand to run')

    args = parser.parse_args(command_line_args)
    return args


def pretty_print_variables(variables):
    s = "\n"
    s += console.bold + console.cyan + "Blackboard Variables:" + console.reset + console.yellow + "\n"
    for variable in variables:
        variable = variable.split('/')
        if len(variable) > 1:
            sep = "/"
        else:
            sep = ""
        s += "    " * len(variable) + sep + variable[-1] + "\n"
    s += console.reset
    print "%s" % s


def echo_sub_blackboard(sub_blackboard):
    print "%s" % sub_blackboard.data


def spin_ros_node(received_topic):
    rospy.init_node(received_topic.topic.split('/')[-1])
    bond = bondpy.Bond(received_topic.topic + "_bond", received_topic.topic.split('/')[-1])
    bond.start()
    if not bond.wait_until_formed(rospy.Duration(3.0)):
       raise Exception('Bond could not be formed')

    def break_bond():
        bond.break_bond()

    rospy.Subscriber(received_topic.topic, std_msgs.String, echo_sub_blackboard)
    rospy.on_shutdown(break_bond)

    while not rospy.is_shutdown():
        rospy.spin()


def handle_args(args):
    if args.list_variables:
        list_variables_service = rosservice_find('py_trees_msgs/BlackboardVariables')
        if len(list_variables_service) > 0:
            if len(list_variables_service) == 1:
                list_variables_service = list_variables_service[0]
            elif args.namespace is not None:
                for service in list_variables_service:
                    if args.namespace in service:
                        list_variables_service = service
                        break
                if type(list_variables_service) is list:
                    print "Services found:", list_variables_service
                    sys.exit("No services with namespace '{0}' found; Exiting! ".format(args.namespace))
            else:
                print "Services found:", list_variables_service
                sys.exit("More than one service found, identify using --namespace argument; Exiting!")

            try:
                rospy.wait_for_service(list_variables_service, timeout=3.0)
                try:
                    list_variables = rospy.ServiceProxy(list_variables_service, BlackboardVariables)
                    recieved_variables = list_variables()
                    pretty_print_variables(recieved_variables.variables)
                except rospy.ServiceException, e:
                    print "Service call failed: %s" % e
            except rospy.exceptions.ROSException, e:
                print "Error: ", e
        else:
            print "Blackboard Variables service not found"
    else:
        if not args.command:
            print(console.red + "\nError: no command provided" + console.reset)
            print("%s" % show_usage())
        else:
            if len(args.command) < 1:
                print(console.red + "\nError: Incorrect number of arguments provided, aborting.\n" + console.reset)
            else:
                variables = args.command[0:]
                variables = [variable.strip(',[]') for variable in variables]

                sub_blackboard_watch_service = rosservice_find('py_trees_msgs/SubBlackboardWatch')
                if len(sub_blackboard_watch_service) > 0:
                    if len(sub_blackboard_watch_service) == 1:
                        sub_blackboard_watch_service = sub_blackboard_watch_service[0]
                    elif args.namespace is not None:
                        for service in sub_blackboard_watch_service:
                            if args.namespace in service:
                                sub_blackboard_watch_service = service
                                break
                        if type(sub_blackboard_watch_service) is list:
                            print "Services found:", sub_blackboard_watch_service
                            sys.exit("No services with namespace '{0}' found; Exiting! ".format(args.namespace))
                    else:
                        print "Services found:", sub_blackboard_watch_service
                        sys.exit("More than one service found, identify using --namespace argument; Exiting!")

                    try:
                        rospy.wait_for_service(sub_blackboard_watch_service, timeout=3.0)
                        try:
                            sub_blackboard_watch_service = rospy.ServiceProxy(sub_blackboard_watch_service, SubBlackboardWatch)
                            received_topic = sub_blackboard_watch_service(variables)
                        except rospy.ServiceException, e:
                            print "Service call failed: %s" % e

                        if received_topic is not None:
                            print(console.blue + ".. Echoing Subblackboard with variables: " + str(variables) + " ..\n" + console.reset)
                            spin_ros_node(received_topic)

                        else:
                            print(console.red + "\nError: Subscribing to topic failed\n" + console.reset)
                    except rospy.exceptions.ROSException, e:
                        print "Error: ", e
                else:
                    print "SubBlackboard Watch service not found"


##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    args = parse_arguments(command_line_args)
    handle_args(args)
