#!/usr/bin/env python
#
##############################################################################
# Documentation
##############################################################################
"""
Simple demo program illustrating the behaviour lifecycle.
"""
##############################################################################
# Imports
##############################################################################

import argparse
import os
import py_trees
import py_trees.console as console
import subprocess

##############################################################################
# Classes
##############################################################################


def show_description():
    s = "\n"
    s += console.green + "Renders a dot graph for a simple tree, complete with blackboxes." + console.reset
    s += "\n"
    return s


def show_usage():
    s = "\n"
    s += console.white
    s += console.bold + "************************************************************************************\n" + console.reset
    s += console.bold + "                                 Demo Dot Graph\n" + console.reset
    s += console.bold + "************************************************************************************\n" + console.reset
    s += "\n"
    s += console.white
    s += console.bold + "    Generate Full Dot Graph" + console.reset + "\n"
    s += console.cyan + "        demo_dot_graphs" + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Generate Dot Graph With Various Blackbox Collapsing Policies" + console.reset + "\n"
    s += console.cyan + "        demo_dot_graphs" + console.yellow + " --level=all" + console.reset + "\n"
    s += console.cyan + "        demo_dot_graphs" + console.yellow + " --level=detail" + console.reset + "\n"
    s += console.cyan + "        demo_dot_graphs" + console.yellow + " --level=component" + console.reset + "\n"
    s += console.cyan + "        demo_dot_graphs" + console.yellow + " --level=big_picture" + console.reset + "\n"
    s += "\n"
    return s


def parse_arguments():
    parser = argparse.ArgumentParser(description=show_description(),
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                     )
    parser.add_argument('-l',
                        '--level',
                        action='store',
                        default='fine_detail',
                        choices=['all', 'fine_detail', 'detail', 'component', 'big_picture'],
                        help='visibility level')

    args = parser.parse_args()
    args.enum_level = py_trees.common.string_to_visibility_level(args.level)
    return args


def which(program):
    '''
      Wrapper around the command line 'which' program.

      :returns: path to the program or None if it doesnt exist.
      :rtype: str or None
    '''
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, unused_fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=show_description(), usage=show_usage())
    args = parse_arguments()

    root = py_trees.composites.Selector("Demo Dot Graphs %s" % args.level)
    first_blackbox = py_trees.composites.Sequence("BlackBox 1")
    first_blackbox.add_child(py_trees.behaviours.Running("Worker"))
    first_blackbox.add_child(py_trees.behaviours.Running("Worker"))
    first_blackbox.add_child(py_trees.behaviours.Running("Worker"))
    first_blackbox.blackbox_level = py_trees.common.BlackBoxLevel.BIG_PICTURE
    second_blackbox = py_trees.composites.Sequence("Blackbox 2")
    second_blackbox.add_child(py_trees.behaviours.Running("Worker"))
    second_blackbox.add_child(py_trees.behaviours.Running("Worker"))
    second_blackbox.add_child(py_trees.behaviours.Running("Worker"))
    second_blackbox.blackbox_level = py_trees.common.BlackBoxLevel.COMPONENT
    third_blackbox = py_trees.composites.Sequence("Blackbox 3")
    third_blackbox.add_child(py_trees.behaviours.Running("Worker"))
    third_blackbox.add_child(py_trees.behaviours.Running("Worker"))
    third_blackbox.add_child(py_trees.behaviours.Running("Worker"))
    third_blackbox.blackbox_level = py_trees.common.BlackBoxLevel.DETAIL
    root.add_child(first_blackbox)
    root.add_child(second_blackbox)
    first_blackbox.add_child(third_blackbox)
    py_trees.display.render_dot_tree(root, args.enum_level)
    if which("xdot"):
        try:
            subprocess.call(["xdot", "demo_dot_graphs_%s.dot" % args.level])
        except KeyboardInterrupt:
            pass
    else:
        print("")
        console.logerror("No xdot viewer found, skipping display [hint: sudo apt install xdot]")
        print("")
