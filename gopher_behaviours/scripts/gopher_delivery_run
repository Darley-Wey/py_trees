#!/usr/bin/env python
#
# License: Yujin
#
##############################################################################
# Documentation
##############################################################################
"""

Program that enables an elevator run. Useful for testing without the whole
delivery pipeline.

"""
##############################################################################
# Imports
##############################################################################

import argparse
import gopher_configuration
import gopher_semantics
import rocon_console.console as console
import rospy
import sys
import gopher_behaviours

##############################################################################
# Core Controller
##############################################################################


def show_usage():
    s = "\n"
    s += console.white
    # s += console.bold + "    Introspection" + console.reset + "\n"
    # s += console.cyan + "        gopher_delivery" + console.yellow + " [option]" + console.reset + "\n"
    # s += "\n"
    s += console.bold + "    Command" + console.reset + "\n"
    s += console.cyan + "        gopher_delivery" + console.yellow + " [<delivery_location>]" + console.reset + "\n"
    s += "\n"
    return s


def parse_arguments(command_line_args):
    gopher = gopher_configuration.Configuration()
    parser = argparse.ArgumentParser(description=console.green + 'Do an elevator run' + console.reset,
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                     )
    parser.add_argument('-n', '--namespace', action='store', default=gopher.namespaces.semantics, help='namespace for the semantics parameters.')

    parser.add_argument('-l', '--locations', action='store_true', help='list available delivery locations')
    parser.add_argument('-p', '--parking', action='store_true', help='include parking/unparking behaviours in the delivery run')

    parser.add_argument('delivery_locations', nargs='*', default=None, help='locations to deliver to.')

    args = parser.parse_args(command_line_args)

    semantics = gopher_semantics.Semantics(semantics_parameter_namespace=args.namespace)
    if args.locations:
        print(console.bold + "\nLocations" + console.reset)
        max_length_locations = len(max(semantics.locations.keys(), key=len))
        max_length_worlds = len(max(semantics.worlds.keys(), key=len))
        for location in sorted(semantics.locations):
            print(console.cyan + "  " + ("{: <%s}" % max_length_locations).format(location) + console.reset + ": " + console.yellow + ("{: <%s}" % max_length_worlds).format(semantics.locations[location].world) + console.green + " [" + semantics.locations[location].description + "]" + console.reset)
        print("\n")
        sys.exit(0)

    if not args.delivery_locations:
        print(console.red + "\nERROR : requires at least one delivery location\n" + console.reset)
        parser.print_help()
        sys.exit(1)

    for delivery_location in args.delivery_locations:
        if delivery_location not in semantics.locations.keys():
            print(console.red + "\nERROR : invalid delivery location [%s]\n" % delivery_location + console.reset)
            parser.print_help()
            sys.exit(1)

    return args

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    rospy.init_node("gopher_delivery_run", log_level=rospy.INFO)
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    args = parse_arguments(command_line_args)

    express_delivery = gopher_behaviours.scripts.deliveries.ExpressDelivery()
    express_delivery.send(args.delivery_locations, args.parking)
    express_delivery.spin()
