#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/yujinrobot/gopher_crazy_hospital/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################
"""
Simple demo program for py trees
"""
##############################################################################
# Imports
##############################################################################

import gopher_behaviours
import os
import py_trees
import rospy

##############################################################################
# Core Controller
##############################################################################


class SwitchMap(object):
    def __init__(self):
        self.root = py_trees.Sequence("SwitchMap")
        self.parameters = gopher_behaviours.Parameters()
        self.logger = py_trees.logging.get_logger("SwitchMap")
        map_filename = os.path.join(gopher_behaviours.utilities.get_gopher_home(), "maps", "hell.dslam")
        switch_map = gopher_behaviours.navigation.SwitchMap("SwitchMap", map_filename, self.parameters.topics.switch_map)

        self.root.add_child(switch_map)
        self.tree = py_trees.ROSBehaviourTree(self.root)

        rospy.on_shutdown(self.shutdown)

        py_trees.display.render_dot_tree(self.root)

    ##############################################################################
    # Tick Tock
    ##############################################################################

    def tick(self):
        self.tree.tick()

    def tick_tock(self):
        self.tree.visitors.append(gopher_behaviours.utilities.DebugVisitor())
        self.tree.tick_tock(sleep_ms=500, number_of_iterations=py_trees.CONTINUOUS_TICK_TOCK, pre_tick_handler=self.pre_tick_handler)

    def pre_tick_handler(self, behaviour_tree):
        self.logger.debug("")
        self.logger.debug("{:-^30}".format(" Run %s " % behaviour_tree.count))
        self.logger.debug("")

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    py_trees.logging.level = py_trees.logging.Level.DEBUG
    rospy.init_node("flash_and_wait", log_level=rospy.DEBUG)
    flash_and_wait = SwitchMap()
    flash_and_wait.tick()
    rospy.spin()
