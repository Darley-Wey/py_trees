#!/usr/bin/env python
#
# License: Yujin
#
##############################################################################
# Documentation
##############################################################################
"""

Program initialises the robot's pose

"""
##############################################################################
# Imports
##############################################################################

import argparse
import gopher_behaviours
import gopher_configuration
import py_trees
import rocon_console.console as console
import rospy
import sys

##############################################################################
# Core Controller
##############################################################################


def show_usage():
    s = "\n"
    s += console.white
    s += console.bold + "    Introspection" + console.reset + "\n"
    s += console.cyan + "        demo_initialisation" + console.yellow + " [option]" + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Command" + console.reset + "\n"
    s += console.cyan + "        demo_initialisation" + console.yellow + " " + console.reset + "\n"
    s += "\n"
    return s


def show_description():
    s = ""
    s += console.green
    s += "This will check if already localised and will rotate the robot until ar markers have"
    s += "been detected and the hint providers have successfully initialised dslam."
    s += console.reset
    return s


def parse_arguments(command_line_args):
    parser = argparse.ArgumentParser(description=show_description(),
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                     )
    command_group = parser.add_argument_group('Command')
    command_group.add_argument('x', nargs='?', default=0.0, type=float, help='x-cooridnate of the goal pose')
    command_group.add_argument('y', nargs='?', default=0.0, type=float, help='y-cooridnate of the goal pose')
    command_group.add_argument('yaw', nargs='?', default=0.0, type=float, help='yaw of the goal pose')

    args = parser.parse_args(command_line_args)

    print("Will move to goal pose (" + str(args.x) + ", " + str(args.y) + ", " + str(args.yaw) + ").")
    return args



class Demo(object):
    def __init__(self):
        self.logger = py_trees.logging.get_logger("Demo Intialisation")
        self.gopher = gopher_configuration.Configuration(fallback_to_defaults=True)
        self.root = gopher_behaviours.navigation.ElfInitialisation("Intialise Pose")
        self.tree = py_trees.ROSBehaviourTree(self.root)
        rospy.on_shutdown(self.shutdown)
        # py_trees.display.render_dot_tree(self.root)
        py_trees.display.print_ascii_tree(self.root)

    ##############################################################################
    # Tick Tock
    ##############################################################################

    def tick_tock(self):
        loop_around = rospy.Rate(10)
        self.tree.visitors.append(gopher_behaviours.utilities.DebugVisitor())
        while not self.root.status == py_trees.Status.SUCCESS\
                and not self.root.status == py_trees.Status.FAILURE\
                and not rospy.is_shutdown():
            self.tree.tick(pre_tick_handler=self.pre_tick_handler)
            loop_around.sleep()

    def pre_tick_handler(self, behaviour_tree):
        self.logger.debug("")
        self.logger.debug("{:-^30}".format(" Run %s " % behaviour_tree.count))
        self.logger.debug("")

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    py_trees.logging.level = py_trees.logging.Level.DEBUG
    rospy.init_node("demo_pose_initalisation", log_level=rospy.DEBUG)
    demo = Demo()
    demo.setup(5)
    demo.tick_tock()
