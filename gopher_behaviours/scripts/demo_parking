#!/usr/bin/env python
#
# License: Yujin
#
##############################################################################
# Imports
##############################################################################

import gopher_behaviours
import gopher_configuration
import gopher_std_msgs.msg as gopher_std_msgs
import py_trees
import rocon_console.console as console
import rospy
import std_msgs.msg as std_msgs
import sys

##############################################################################
# Arg Parsing
##############################################################################


def show_description():
    s = "\n"
    s += console.green + "This program executes unparking/init/parking in a loop for convenient testing." + console.reset
    s += "\n"
    return s


def show_usage():
    s = "\n"
    s += console.white
    s += console.bold + "************************************************************************************\n" + console.reset
    s += console.bold + "                                 Demo Parking\n" + console.reset
    s += console.bold + "************************************************************************************\n" + console.reset
    s += "\n"
    s += console.white
    s += console.bold + "    Generate Dot" + console.reset + "\n"
    s += console.cyan + "        demo_parking" + console.yellow + " --render" + "[--visibility-level=all]" + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Execute" + console.reset + "\n"
    s += console.cyan + "        demo_parking" + console.yellow + " [options]" + console.reset + "\n"
    s += "\n"
    s += console.white
    s += console.bold + "    Launchers" + console.reset + "\n"
    s += console.cyan + "        gopher_robot/apps_gocart.launch + 'Fake Navigation'" + console.reset + "\n"
    s += console.cyan + "        gopher_podium/apps_gocart.launch + 'Navigation'" + console.reset + "\n"
    s += "\n"
    return s


def parse_arguments(command_line_args):
    parser = gopher_behaviours.scripts.demo.create_arg_parser(show_description, show_usage)
    parser.add_argument('-e', '--elf',
                        action='store',
                        default="teleop",
                        choices=["ar", "teleop"],
                        help='type of elf to use for initialisation'
                        )

    args = parser.parse_args(command_line_args)
    args.visibility_level = py_trees.common.string_to_visibility_level(args.visibility_level)
    args.elf = gopher_behaviours.elf.string_to_elf_initialisation_type[args.elf]
    return args

##############################################################################
# Tree
##############################################################################


def create_root():
    gopher = gopher_configuration.Configuration(fallback_to_defaults=True)
    root = py_trees.composites.Parallel(
        name="Demo Parking",
        policy=py_trees.common.ParallelPolicy.SUCCESS_ON_ALL
    )
    priorities = py_trees.composites.Selector("Priorities")

    #################################
    # Event Handler
    #################################
    event_handler = gopher_behaviours.interactions.create_button_event_handler()

    #################################
    # Global Abort
    #################################
    global_abort = py_trees.composites.Sequence(name="Global Abort")
    is_global_abort_activated = py_trees.CheckBlackboardVariable(
        name='Is Aborted?',
        variable_name='event_abort_button',
        expected_value=True
    )
    global_abort_repark = gopher_behaviours.park.create_repark_subtree()

    #################################
    # Just Do It - Park/Unpark/Repark
    #################################
    just_do_it = py_trees.Sequence("Just Do It!")
    unpark = gopher_behaviours.unpark.UnPark("UnPark")
    park = gopher_behaviours.park.Park("Park")
    repark = gopher_behaviours.park.create_repark_subtree()

    #################################
    # Drive Around
    #################################
    drive_around_get_a_coffee = py_trees.composites.Parallel(
        name='Drive Around, Get a Coffee', policy=py_trees.common.ParallelPolicy.SUCCESS_ON_ONE)
    drive_around_flash_leds = gopher_behaviours.interactions.Notification(
        name='Flash Cool',
        message='do a delivery, get a coffee',
        led_pattern=gopher.led_patterns.im_doing_something_cool,
        button_confirm=gopher_std_msgs.Notification.BUTTON_ON,
        button_cancel=gopher_std_msgs.Notification.RETAIN_PREVIOUS,
    )
    wait_for_button = py_trees.subscribers.WaitForSubscriberData(
        name="Wait for Go Button",
        topic_name=gopher.buttons.go,
        topic_type=std_msgs.String
    )

    #################################
    # Restart
    #################################
    restart_wait_for_go_button = py_trees.subscribers.WaitForSubscriberData(
        name="Wait for Go Button",
        topic_name=gopher.buttons.go,
        topic_type=std_msgs.String
    )

    restart = py_trees.composites.Parallel(
        name="Restart",
        policy=py_trees.common.ParallelPolicy.SUCCESS_ON_ONE
    )
    restart_flash_holding = gopher_behaviours.interactions.Notification(
        name='Flash Holding',
        message='reset and get ready to start again',
        led_pattern=gopher.led_patterns.holding,
        button_confirm=gopher_std_msgs.Notification.BUTTON_ON,
        button_cancel=gopher_std_msgs.Notification.RETAIN_PREVIOUS
    )

    #################################
    # Graph
    #################################
    root.add_child(event_handler)
    root.add_child(priorities)
    priorities.add_child(global_abort)
    global_abort.add_child(is_global_abort_activated)
    global_abort.add_child(global_abort_repark)
    priorities.add_child(just_do_it)
    just_do_it.add_child(unpark)
    just_do_it.add_child(drive_around_get_a_coffee)
    drive_around_get_a_coffee.add_child(drive_around_flash_leds)
    drive_around_get_a_coffee.add_child(wait_for_button)
    just_do_it.add_child(park)
    just_do_it.add_child(restart)
    restart.add_child(restart_flash_holding)
    restart.add_child(restart_wait_for_go_button)
    priorities.add_child(repark)

    return root


##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    args = parse_arguments(command_line_args)
    if args.debug:
        py_trees.logging.level = py_trees.logging.Level.DEBUG

    demo = gopher_behaviours.scripts.demo.Demo(create_root())
    if args.render:
        py_trees.display.render_dot_tree(demo.root, args.visibility_level)
        sys.exit()

    rospy.init_node("demo", log_level=rospy.INFO)
    if not demo.setup(5):
        sys.exit(console.red + "[ERROR] failed to setup required ros components." + console.reset)
    demo.tick_tock()
