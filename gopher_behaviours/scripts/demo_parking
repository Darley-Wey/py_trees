#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/yujinrobot/gopher_crazy_hospital/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################
"""
USE THE ROS LAUNCHER INSTEAD!!!

gopher_behaviours/demo_unpark.launch
"""
##############################################################################
# Imports
##############################################################################

import gopher_behaviours
import gopher_configuration
import gopher_navi_msgs.msg as gopher_navi_msgs
import py_trees
# import rocon_console.console as console
import rospy
import sys

##############################################################################
# Tree
##############################################################################


class DemoUnPark(object):
    def __init__(self):
        self.gopher = gopher_configuration.Configuration()
        self.logger = py_trees.logging.get_logger("UnPark")

        self.root = py_trees.Sequence("Root")
        unpark = gopher_behaviours.UnPark("UnPark")
        park = gopher_behaviours.Park("Park")

        teleport = gopher_behaviours.navigation.Teleport(
            name="Activate the Homebase Teleport!",
            goal=gopher_navi_msgs.TeleportGoal(location="homebase", special_effects=True)
        )

        wait_for_button = gopher_behaviours.interactions.WaitForButton('Wait for Go Button', self.gopher.buttons.go)
        switch_to_parking = gopher_behaviours.interactions.SendNotification('Switch to Parking', message='waiting for button to switch to parking', led_pattern=self.gopher.led_patterns.im_doing_something_cool)
        switch_to_parking.add_child(wait_for_button)

        wait_for_button_two = gopher_behaviours.interactions.WaitForButton('Wait for Go Button', self.gopher.buttons.go)
        restart = gopher_behaviours.interactions.SendNotification('Restart', message='reset and get ready to start again', led_pattern=self.gopher.led_patterns.holding)
        restart.add_child(wait_for_button_two)

        self.root.add_child(unpark)
        self.root.add_child(teleport)
        self.root.add_child(switch_to_parking)
        self.root.add_child(park)
        self.root.add_child(restart)
        self.tree = py_trees.ROSBehaviourTree(self.root)
        rospy.on_shutdown(self.shutdown)
        py_trees.display.print_ascii_tree(self.root, 0)

    def wait_for_ros(self):
        pass
        # if not self.root.setup_ros(15.0):
        #     rospy.logerr("SimpleMotions: failed to setup the ros components for parking/unparking.")

    ##############################################################################
    # Tick Tock
    ##############################################################################

    def tick_tock(self):
        self.tree.visitors.append(gopher_behaviours.utilities.DebugVisitor())
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            self.tree.tick(pre_tick_handler=self.pre_tick_handler)
            if self.root.status == py_trees.Status.FAILURE:
                break
            if self.root.status == py_trees.Status.SUCCESS:
                pass  # break
            rate.sleep()

    def pre_tick_handler(self, behaviour_tree):
        self.logger.debug("")
        self.logger.debug("{:-^30}".format(" Run %s " % behaviour_tree.count))
        self.logger.debug("")

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    py_trees.logging.level = py_trees.logging.Level.DEBUG
    rospy.init_node("demo_unpark", log_level=rospy.DEBUG)

    if rospy.get_param("~dot", False):
        gopher_behaviours.UnPark.render_dot_tree()
        sys.exit()

    unpark = DemoUnPark()
    unpark.wait_for_ros()
    unpark.tick_tock()
