#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/yujinrobot/gopher_crazy_hospital/license/LICENSE
#
##############################################################################
# Imports
##############################################################################

import argparse
import gopher_behaviours
import gopher_configuration
import py_trees
import rocon_console.console as console
import rospy
import std_msgs.msg as std_msgs
import sys

##############################################################################
# Arg Parsing
##############################################################################


def show_description():
    s = "\n"
    s += console.green + "This program executes unparking/init/parking in a loop for convenient testing." + console.reset
    s += "\n"
    return s


def show_usage():
    s = "\n"
    s += console.white
    s += console.bold + "************************************************************************************\n" + console.reset
    s += console.bold + "                                 Demo Parking\n" + console.reset
    s += console.bold + "************************************************************************************\n" + console.reset
    s += "\n"
    s += console.white
    s += console.bold + "    Generate Dot" + console.reset + "\n"
    s += console.cyan + "        demo_parking" + console.yellow + " --render" + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Execute" + console.reset + "\n"
    s += console.cyan + "        demo_parking" + console.yellow + " [options]" + console.reset + "\n"
    s += "\n"
    s += console.white
    s += console.bold + "    Required Launchers" + console.reset + "\n"
    s += console.cyan + "        + minimal.launch" + console.reset + "\n"
    s += console.cyan + "        + fake_navigation.launch" + console.reset + "\n"
    s += "\n"
    return s


def parse_arguments(command_line_args):
    parser = argparse.ArgumentParser(description=show_description(),
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                     )
    parser.add_argument('-r', '--render', action='store_true', help='render the graph to dot/png/svg.')
    parser.add_argument('-d', '--debug', action='store_true', help='debug level tree logging.')

    args = parser.parse_args(command_line_args)
    return args

##############################################################################
# Tree
##############################################################################


class Demo(object):
    def __init__(self):
        self.gopher = gopher_configuration.Configuration(fallback_to_defaults=True)
        self.logger = py_trees.logging.get_logger("Demo Parking")

        self.root = py_trees.Sequence("Demo Parking")
        unpark = gopher_behaviours.UnPark("UnPark")
        park = gopher_behaviours.Park("Park")

        button_pressed_events = py_trees.composites.Sequence("Event Handler")
        go_button_events = gopher_behaviours.interactions.MonitorButtonEvents(
            name="Go Button Events",
            topic_name=self.gopher.buttons.go,
            variable_name="event_go_button"
        )
        stop_button_events = gopher_behaviours.interactions.MonitorButtonEvents(
            name="Stop Button Events",
            topic_name=self.gopher.buttons.stop,
            variable_name="event_stop_button"
        )

        wait_for_button = py_trees.subscribers.WaitForSubscriberData(
            name="Wait for Go Button",
            topic_name=self.gopher.buttons.go,
            topic_type=std_msgs.String
        )

        switch_to_parking = gopher_behaviours.interactions.SendNotification(
            name='Drive Around, Get a Coffee',
            message='do a delivery, get a coffee',
            led_pattern=self.gopher.led_patterns.im_doing_something_cool
        )
        switch_to_parking.add_child(wait_for_button)

        wait_for_button_two = py_trees.subscribers.WaitForSubscriberData(
            name="Wait for Go Button",
            topic_name=self.gopher.buttons.go,
            topic_type=std_msgs.String
        )

        restart = gopher_behaviours.interactions.SendNotification(
            name='Restart',
            message='reset and get ready to start again',
            led_pattern=self.gopher.led_patterns.holding
        )
        restart.add_child(wait_for_button_two)

        self.root.add_child(button_pressed_events)
        button_pressed_events.add_child(go_button_events)
        button_pressed_events.add_child(stop_button_events)
        self.root.add_child(unpark)
        self.root.add_child(switch_to_parking)
        self.root.add_child(park)
        self.root.add_child(restart)
        self.tree = py_trees.ROSBehaviourTree(self.root)
        rospy.on_shutdown(self.shutdown)
        py_trees.display.print_ascii_tree(self.root, 0)

    ##############################################################################
    # Tick Tock
    ##############################################################################

    def tick_tock(self):
        self.tree.visitors.append(py_trees.trees.DebugVisitor())
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            self.tree.tick(pre_tick_handler=self.pre_tick_handler)
            if self.root.status == py_trees.Status.FAILURE:
                pass  # break
            if self.root.status == py_trees.Status.SUCCESS:
                pass  # break
            rate.sleep()

    def pre_tick_handler(self, behaviour_tree):
        self.logger.debug("")
        self.logger.debug("{:-^30}".format(" Run %s " % behaviour_tree.count))
        self.logger.debug("")

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    args = parse_arguments(command_line_args)
    if args.debug:
        py_trees.logging.level = py_trees.logging.Level.DEBUG

    demo = Demo()
    if args.render:
        py_trees.display.print_ascii_tree(demo.root, 0)
        py_trees.display.render_dot_tree(demo.root)
        sys.exit()

    rospy.init_node("demo", log_level=rospy.INFO)
    if not demo.tree.setup(5):
        sys.exit(console.red + "[ERROR] failed to setup required ros components." + console.reset)
    demo.tick_tock()
