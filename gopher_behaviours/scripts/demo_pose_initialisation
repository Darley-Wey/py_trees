#!/usr/bin/env python
#
# License: Yujin
#
##############################################################################
# Documentation
##############################################################################
"""

Program initialises the robot's pose

"""
##############################################################################
# Imports
##############################################################################

import argparse
import gopher_behaviours
import gopher_configuration
import gopher_std_msgs.msg as gopher_std_msgs
import py_trees
import rocon_console.console as console
import rospy
import sys

##############################################################################
# Core Controller
##############################################################################


def show_usage():
    s = "\n"
    s += console.white
    s += console.bold + "    Introspection" + console.reset + "\n"
    s += console.cyan + "        demo_initialisation" + console.yellow + " [option]" + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Command" + console.reset + "\n"
    s += console.cyan + "        demo_initialisation" + console.yellow + " " + console.reset + "\n"
    s += "\n"
    return s


class Intialise(object):
    def __init__(self):
        gopher = gopher_configuration.Configuration()
        self.root = py_trees.Sequence("Demo Pose Intialisation Pose")
        pose_intialisation = gopher_behaviours.navigation.PoseIntialisation("Intialise Pose")
        self.root.add_child(pose_intialisation)
        self.logger = py_trees.logging.get_logger("Demo Pose Intialisation Pose")
        self.tree = py_trees.ROSBehaviourTree(self.root)
        rospy.on_shutdown(self.shutdown)
        py_trees.display.render_dot_tree(self.root)
        py_trees.display.print_ascii_tree(self.root)

    ##############################################################################
    # Tick Tock
    ##############################################################################

    def tick_tock(self):
        loop_around = rospy.Rate(10)
        self.tree.visitors.append(gopher_behaviours.utilities.DebugVisitor())
        while not self.root.status == py_trees.Status.SUCCESS\
                and not self.root.status == py_trees.Status.FAILURE\
                and not rospy.is_shutdown():
            self.tree.tick(pre_tick_handler=self.pre_tick_handler)
            loop_around.sleep()

    def pre_tick_handler(self, behaviour_tree):
        self.logger.debug("")
        self.logger.debug("{:-^30}".format(" Run %s " % behaviour_tree.count))
        self.logger.debug("")

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    py_trees.logging.level = py_trees.logging.Level.DEBUG
    rospy.init_node("demo_pose_initalisation", log_level=rospy.DEBUG)
    intialise = Intialise()
    intialise.tick_tock()
