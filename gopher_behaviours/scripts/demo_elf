#!/usr/bin/env python
#
# License: Yujin
#
##############################################################################
# Imports
##############################################################################

import gopher_behaviours
import gopher_configuration
import py_trees
import rocon_console.console as console
import rospy
import sys

##############################################################################
# Arg Parsing
##############################################################################


def show_description():
    s = "\n"
    s += console.green + "This will check if already localised and will rotate the robot until ar markers have" + console.reset
    s += console.green + "been detected and the hint providers have successfully initialised the elf." + console.reset
    s += "\n"
    return s


def show_usage():
    s = "\n"
    s += console.white
    s += console.bold + "************************************************************************************\n" + console.reset
    s += console.bold + "                                 Demo Elf\n" + console.reset
    s += console.bold + "************************************************************************************\n" + console.reset
    s += "\n"
    s += console.white
    s += console.bold + "    Generate Dot" + console.reset + "\n"
    s += console.cyan + "        demo_elf" + console.yellow + " --render" + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Execute" + console.reset + "\n"
    s += console.cyan + "        demo_elf" + console.yellow + " [options]" + console.reset + "\n"
    s += "\n"
    s += console.white
    s += console.bold + "    Launchers" + console.reset + "\n"
    s += console.cyan + "        gopher_robot/apps_gocart.launch + 'DSlam Navigation'" + console.reset + "\n"
    s += console.cyan + "        gopher_podium/apps_gocart.launch + 'Navigation'" + console.reset + " (tele-elf only)\n"
    s += "\n"
    return s


def parse_arguments(command_line_args):
    parser = gopher_behaviours.scripts.demo.create_arg_parser(show_description, show_usage)
    parser.add_argument('-e', '--elf',
                        action='store',
                        default="ar",
                        choices=["ar", "teleop"],
                        help='type of elf to use for initialisation'
                        )

    gopher = gopher_configuration.configuration.Configuration(fallback_to_defaults=True)
    parser.add_argument('-s', '--semantics', action='store', default=gopher.namespaces.semantics, help='namespace for the semantics parameters.')

    args = parser.parse_args(command_line_args)
    args.visibility_level = py_trees.common.string_to_visibility_level(args.visibility_level)
    args.elf = gopher_behaviours.elf.string_to_elf_initialisation_type[args.elf]
    return args

##############################################################################
# Root
##############################################################################


def create_root():
    root = py_trees.composites.Parallel(
        name="Demo Elf",
        policy=py_trees.common.ParallelPolicy.SUCCESS_ON_ALL
    )

    #################################
    # Event Handler
    #################################
    event_handler = gopher_behaviours.interactions.create_button_event_handler()

    #################################
    # Elf
    #################################
    if args.elf == gopher_behaviours.elf.InitialisationType.TELEOP:
        elf = gopher_behaviours.elf.TeleopInitialisation()
    else:
        elf = gopher_behaviours.elf.ARInitialisation()

    #################################
    # Graph
    #################################
    root.add_child(event_handler)
    root.add_child(elf)

    return root

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    args = parse_arguments(command_line_args)
    if args.debug:
        py_trees.logging.level = py_trees.logging.Level.DEBUG

    demo = gopher_behaviours.scripts.demo.Demo(create_root())

    if args.render:
        py_trees.display.render_dot_tree(demo.root, args.visibility_level)
        sys.exit()

    rospy.init_node("demo", log_level=rospy.INFO)
    if not demo.setup(15):
        sys.exit(console.red + "[ERROR] failed to setup required ros components." + console.reset)
    demo.tick_tock()
