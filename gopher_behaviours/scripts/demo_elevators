#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/yujinrobot/gopher_crazy_hospital/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################
"""
USE THE ROS LAUNCHER INSTEAD!!!

gopher_behaviours/demo_switch_map.launch

"""
##############################################################################
# Imports
##############################################################################

import gopher_behaviours
import gopher_semantics
import os
import py_trees
import rospy

##############################################################################
# Core Controller
##############################################################################


class DemoElevators(object):
    def __init__(self, destination):
        self.root = gopher_behaviours.elevators.HumanAssistedElevators("HighwayToHell")
        self.parameters = gopher_behaviours.Parameters()
        self.semantics = gopher_semantics.Semantics(self.parameters.namespaces.semantics)
        try:
            origin = self.semantics.locations
            destination_level = self.semantics.elevators.find_level_on_elevator('highway_to_hell', map_name)
        except AttributeError:
            rospy.logerr("Elevators : no elevators found, wrong semantics loaded [%s]?\n%s" % (self.parameters.namespaces.semantics, str(self.semantics)))
            return

        self.logger = py_trees.logging.get_logger("Elevators")
        self.tree = py_trees.ROSBehaviourTree(self.root)
        rospy.on_shutdown(self.shutdown)
        py_trees.display.render_dot_tree(self.root)

    ##############################################################################
    # Tick Tock
    ##############################################################################

    def tick_tock(self):
        loop_around = rospy.Rate(10)
        self.tree.visitors.append(gopher_behaviours.utilities.DebugVisitor())
        while self.root.status != py_trees.Status.SUCCESS and not rospy.is_shutdown():
            self.tree.tick(pre_tick_handler=self.pre_tick_handler)
            loop_around.sleep()

    def pre_tick_handler(self, behaviour_tree):
        self.logger.debug("")
        self.logger.debug("{:-^30}".format(" Run %s " % behaviour_tree.count))
        self.logger.debug("")

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    py_trees.logging.level = py_trees.logging.Level.DEBUG
    rospy.init_node("demo_elevators", log_level=rospy.DEBUG)

    parameters = gopher_behaviours.Parameters()
    semantics = gopher_semantics.Semantics(parameters.namespaces.semantics)

    # TODO learn from the cartologist where the fuck we are and use that as origin
    origin = rospy.get_param("~origin", 'earth')
    destination = rospy.get_param("~destination", 'hell')

    demo_elevators = DemoElevators(destination)
    demo_elevators.tick_tock()
