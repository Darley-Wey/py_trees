#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/yujinrobot/gopher_crazy_hospital/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################
"""
USE THE ROS LAUNCHER INSTEAD!!!

gopher_behaviours/demo_switch_map.launch

"""
##############################################################################
# Imports
##############################################################################

import argparse
import gopher_configuration
import gopher_behaviours
import gopher_semantics
import py_trees
import rocon_console.console as console
import rospy
import sys

##############################################################################
# Core Controller
##############################################################################


def show_usage():
    s = "\n"
    s += console.white
    s += console.bold + "    Introspection" + console.reset + "\n"
    s += console.cyan + "        gopher_elevator_run" + console.yellow + " [option]" + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Command" + console.reset + "\n"
    s += console.cyan + "        gopher_elevator_run" + console.yellow + " <origin> <elevator> <destination>" + console.reset + "\n"
    s += "\n"
    return s


def parse_arguments(command_line_args):
    gopher = gopher_configuration.Configuration()
    parser = argparse.ArgumentParser(description=console.green + 'Do an elevator run' + console.reset,
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                     )
    parser.add_argument('-n', '--namespace', action='store', default=gopher.namespaces.semantics, help='namespace for the semantics parameters.')

    introspection_group = parser.add_mutually_exclusive_group()
    introspection_group.add_argument('-w', '--worlds', action='store_true', help='list available worlds')
    introspection_group.add_argument('-e', '--elevators', action='store_true', help='list available elevators')

    command_group = parser.add_argument_group('Command')
    command_group.add_argument('origin', nargs='?', default=None, help='world to shift from.')
    command_group.add_argument('elevator', nargs='?', default=None, type=str, help='elevator to use.')
    command_group.add_argument('destination', nargs='?', default=None, type=str, help='world to shift to.')

    args = parser.parse_args(command_line_args)

    semantics = gopher_semantics.Semantics(semantics_parameter_namespace=args.namespace)
    if args.worlds:
        print("%s" % semantics.worlds)
        sys.exit(0)
    elif args.elevators:
        print("%s" % semantics.elevators)
        sys.exit(0)

    if args.origin is None or args.elevator is None or args.destination is None:
        print(console.red + "\nERROR : requires all three command values (origin, elevator, destination)\n" + console.reset)
        parser.print_help()
        sys.exit(1)

    if args.origin not in semantics.worlds.keys():
        print(console.red + "\nERROR : origin '%s' is not in the semantic worlds list %s\n" % (args.origin, semantics.worlds.keys()) + console.reset)
        parser.print_help()
        sys.exit(1)

    if args.elevator not in semantics.elevators.keys():
        print(console.red + "\nERROR : elevator '%s' is not in the semantic elevators list %s\n" % (args.elevator, semantics.elevators.keys()) + console.reset)
        parser.print_help()
        sys.exit(1)

    if args.destination not in semantics.worlds.keys():
        print(console.red + "\nERROR : destination '%s' is not in the semantic worlds list %s\n" % (args.destination, semantics.worlds.keys()) + console.reset)
        parser.print_help()
        sys.exit(1)

    args.elevator = semantics.elevators[args.elevator]
    return args


class DoElevatorRun(object):
    def __init__(self, origin, elevator, destination):
        self.root = gopher_behaviours.elevators.HumanAssistedElevators("ElevatorRun", origin, elevator, destination)
        self.logger = py_trees.logging.get_logger("Elevators")
        self.tree = py_trees.ROSBehaviourTree(self.root)
        rospy.on_shutdown(self.shutdown)
        py_trees.display.render_dot_tree(self.root)
        py_trees.display.print_ascii_tree(self.root)

    ##############################################################################
    # Tick Tock
    ##############################################################################

    def tick_tock(self):
        loop_around = rospy.Rate(10)
        self.tree.visitors.append(gopher_behaviours.utilities.DebugVisitor())
        while self.root.status != py_trees.Status.SUCCESS and not rospy.is_shutdown():
            self.tree.tick(pre_tick_handler=self.pre_tick_handler)
            loop_around.sleep()

    def pre_tick_handler(self, behaviour_tree):
        self.logger.debug("")
        self.logger.debug("{:-^30}".format(" Run %s " % behaviour_tree.count))
        self.logger.debug("")

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    py_trees.logging.level = py_trees.logging.Level.DEBUG
    rospy.init_node("gopher_elevator_run", log_level=rospy.DEBUG)
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    args = parse_arguments(command_line_args)

    do_elevator_run = DoElevatorRun(args.origin, args.elevator, args.destination)
    do_elevator_run.tick_tock()
