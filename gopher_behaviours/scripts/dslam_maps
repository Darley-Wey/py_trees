#!/usr/bin/env python
#
# License: Yujin
#
##############################################################################
# Documentation
##############################################################################
"""
Utility program that loads, lists and downloads dslam maps.
"""
##############################################################################
# Imports
##############################################################################

import argparse
import os
import rocon_console.console as console
import rospkg
import rospy
import std_msgs.msg as std_msgs
import sys

##############################################################################
# Helpers
##############################################################################


def show_usage():
    s = "Usage:"
    return s


class ParseArguments(object):

    def __init__(self):
        # switch to the rosbag style heirarchical format
        parser = argparse.ArgumentParser(description='Utility to load/list/download dslam maps.',
                                         usage='''dslam_maps <command> [<args>]

Where command is one of:
    load     load a map.
    list     list all maps.
    install  install a map from the external map server.

    ''',
                                         epilog="And his noodly appendage reached forth to tickle the blessed...",
                                         formatter_class=argparse.RawTextHelpFormatter
                                         )
        parser.add_argument('command', help='subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print(console.red + "\nError: unrecognised command, aborting.\n" + console.reset)
            sys.exit()

        getattr(self, args.command)()

    def load(self):
        parser = argparse.ArgumentParser(description='Request dslam load (switch to) a new map.',
                                         usage='''dslam_maps load <map>

This looks for the requested map in ROS_HOME/gopher/maps directory if an absolute path was not provided.
''',
                                         epilog="And his noodly appendage reached forth to tickle the blessed...",
                                         formatter_class=argparse.RawTextHelpFormatter
                                         )
        parser.add_argument('map', help='map to load.')
        args = parser.parse_args(sys.argv[2:])
        if os.path.isfile(args.map):
            map_filename = args.map
        else:
            guessed_name1 = os.path.join(gopher_maps_home(), args.map)
            guessed_name2 = os.path.join(gopher_maps_home(), args.map + '.dslam')
            if os.path.isfile(guessed_name1):
                map_filename = guessed_name1
            elif os.path.isfile(guessed_name2):
                map_filename = guessed_name2
            else:
                print(console.red + "\nError: map not found, aborting [%s].\n" % args.map + console.reset)
                sys.exit()
        self.publisher = rospy.Publisher("/dslam/map/switch", std_msgs.String, queue_size=1)
        rospy.sleep(1.5)
        rospy.loginfo("DSlam Maps : loading new map [%s][%s] " % (args.map, map_filename))
        self.publisher.publish(std_msgs.String(map_filename))

    def list(self):
        print("List")

    def install(self):
        print("Install")


def gopher_maps_home():
    gopher_maps = os.path.join(rospkg.get_ros_home(), 'gopher', 'maps')
    if not os.path.isdir(gopher_maps):
        os.makedirs(gopher_maps)
    return os.path.join(rospkg.get_ros_home(), 'gopher', 'maps')

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    rospy.init_node("dslam_maps", log_level=rospy.INFO)
    parse_arguments = ParseArguments()
    rospy.spin()
