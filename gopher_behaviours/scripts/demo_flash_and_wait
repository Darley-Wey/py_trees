#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/yujinrobot/gopher_crazy_hospital/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################
"""
USE THE ROS LAUNCHER INSTEAD!!!

gopher_behaviours/demo_flash_and_wait.launch
"""
##############################################################################
# Imports
##############################################################################

import gopher_configuration
import gopher_behaviours
import gopher_std_msgs.msg as gopher_std_msgs
import py_trees
import rocon_console.console as console
import rospy
import sys

##############################################################################
# Arg Parsing
##############################################################################


def show_description():
    s = "\n"
    s += console.green + "This program executes unparking/init/parking in a loop for convenient testing." + console.reset
    s += "\n"
    return s


def show_usage():
    s = "\n"
    s += console.white
    s += console.bold + "************************************************************************************\n" + console.reset
    s += console.bold + "                                 Flash And Wait\n" + console.reset
    s += console.bold + "************************************************************************************\n" + console.reset
    s += "\n"
    s += console.white
    s += console.bold + "    Generate Dot" + console.reset + "\n"
    s += console.cyan + "        demo_flash_and_wait" + console.yellow + " --render" + "[--visibility-level=all]" + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Execute" + console.reset + "\n"
    s += console.cyan + "        demo_flash_and_wait" + console.yellow + " [options]" + console.reset + "\n"
    s += "\n"
    s += console.white
    s += console.bold + "    Launchers" + console.reset + "\n"
    s += console.cyan + "        gopher_robot/apps_gocart.launch + 'Fake Navigation'" + console.reset + "\n"
    s += console.cyan + "        gopher_podium/apps_gocart.launch + 'Navigation'" + console.reset + " (tele-elf only)\n"
    s += "\n"
    return s


def parse_arguments(command_line_args):
    parser = gopher_behaviours.scripts.demo.create_arg_parser(show_description, show_usage)
    args = parser.parse_args(command_line_args)
    args.visibility_level = py_trees.common.string_to_visibility_level(args.visibility_level)
    return args

##############################################################################
# Core Controller
##############################################################################


def create_root():
    gopher = gopher_configuration.Configuration(fallback_to_defaults=True)
    root = py_trees.composites.Parallel(
        name="Demo Flash And Wait",
        policy=py_trees.common.ParallelPolicy.SUCCESS_ON_ALL
    )
    jobs = py_trees.composites.Sequence("Jobs")

    #################################
    # Event Handler
    #################################
    event_handler = gopher_behaviours.interactions.create_button_event_handler()

    party = py_trees.composites.Parallel(
        name="Party",
        policy=py_trees.common.ParallelPolicy.SUCCESS_ON_ONE
    )
    flash_leds_need_input = gopher_behaviours.interactions.Notification(
        "Waiting for Input",
        led_pattern=gopher.led_patterns.humans_give_me_input,
        button_confirm=gopher_std_msgs.Notification.BUTTON_ON,
        button_cancel=gopher_std_msgs.Notification.RETAIN_PREVIOUS,
        message="waiting for the user to hit the button"
    )
    wait_for_go_button_press = py_trees.blackboard.WaitForBlackboardVariable(
        name='Wait for Go Button',
        variable_name='event_go_button',
        expected_value=True
    )

    party.add_child(flash_leds_need_input)
    party.add_child(wait_for_go_button_press)

    honk = gopher_behaviours.interactions.Articulate("Honk", gopher.sounds.honk)
    pausing = py_trees.composites.Parallel(
        name="Hangover",
        policy=py_trees.common.ParallelPolicy.SUCCESS_ON_ONE
    )
    flash_leds_pause = gopher_behaviours.interactions.Notification(
        name="Waiting",
        led_pattern=gopher.led_patterns.holding,
        button_confirm=gopher_std_msgs.Notification.BUTTON_ON,
        button_cancel=gopher_std_msgs.Notification.RETAIN_PREVIOUS,
        message="flashing while pausing...for a bit"
    )
    pausing.add_child(flash_leds_pause)
    pausing.add_child(py_trees.timers.Timer("Pause 5s", duration=5.0))

    root.add_child(event_handler)
    root.add_child(jobs)
    jobs.add_child(party)
    jobs.add_child(honk)
    jobs.add_child(pausing)
    return root

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    args = parse_arguments(command_line_args)
    if args.debug:
        py_trees.logging.level = py_trees.logging.Level.DEBUG

    demo = gopher_behaviours.scripts.demo.Demo(create_root(), loop=True)

    if args.render:
        py_trees.display.render_dot_tree(demo.root, args.visibility_level)
        sys.exit()

    rospy.init_node("demo", log_level=rospy.INFO)
    if not demo.setup(15):
        sys.exit(console.red + "[ERROR] failed to setup required ros components." + console.reset)
    demo.tick_tock()
