#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/yujinrobot/gopher_crazy_hospital/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################
"""
Simple demo program for py trees
"""
##############################################################################
# Imports
##############################################################################

import gopher_behaviours
import py_trees
import rospy

##############################################################################
# Core Controller
##############################################################################


class FlashAndWait(object):
    def __init__(self):
        self.root = py_trees.Sequence("FlashAndWait")
        self.parameters = gopher_behaviours.Parameters()
        self.logger = py_trees.logging.get_logger("FlashAndWait")

        flash_leds_need_input = gopher_behaviours.interactions.FlashLEDs("Waiting for Input", led_pattern=self.parameters.led_patterns.humans_give_me_input)
        flash_leds_need_input.add_child(gopher_behaviours.interactions.WaitForButton("Wait for Button", self.parameters.buttons.go))
        honk = gopher_behaviours.interactions.Articulate("Honk", self.parameters.sounds.honk)
        flash_leds_pause = gopher_behaviours.interactions.FlashLEDs("Waiting", led_pattern=self.parameters.led_patterns.holding)
        flash_leds_pause.add_child(gopher_behaviours.time.Pause("Pause 5s", 5.0))

        self.root.add_child(flash_leds_need_input)
        self.root.add_child(honk)
        self.root.add_child(flash_leds_pause)
        self.tree = py_trees.ROSBehaviourTree(self.root)

        rospy.on_shutdown(self.shutdown)

        py_trees.display.render_dot_tree(self.root)

    ##############################################################################
    # Tick Tock
    ##############################################################################

    def tick_tock(self):
        self.tree.visitors.append(gopher_behaviours.utilities.DebugVisitor())
        self.tree.tick_tock(sleep_ms=500, number_of_iterations=py_trees.CONTINUOUS_TICK_TOCK, pre_tick_handler=self.pre_tick_handler)

    def pre_tick_handler(self, behaviour_tree):
        self.logger.debug("")
        self.logger.debug("{:-^30}".format(" Run %s " % behaviour_tree.count))
        self.logger.debug("")

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    py_trees.logging.level = py_trees.logging.Level.DEBUG
    rospy.init_node("flash_and_wait", log_level=rospy.DEBUG)
    flash_and_wait = FlashAndWait()
    flash_and_wait.tick_tock()
