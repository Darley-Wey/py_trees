#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/yujinrobot/gopher_crazy_hospital/license/LICENSE
#
##############################################################################
# Imports
##############################################################################

import argparse
import gopher_behaviours
import gopher_configuration
import gopher_std_msgs.msg as gopher_std_msgs
import math
import py_trees
import rocon_console.console as console
import rospy
import sys

##############################################################################
# Arg Parsing
##############################################################################


def show_description():
    s = "\n"
    s += console.green + "This program executes undocking/docking in a loop for convenient testing." + console.reset
    s += "\n"
    return s


def show_usage():
    s = "\n"
    s += console.white
    s += console.bold + "************************************************************************************\n" + console.reset
    s += console.bold + "                                 Demo Docking\n" + console.reset
    s += console.bold + "************************************************************************************\n" + console.reset
    s += "\n"
    s += console.white
    s += console.bold + "    Generate Dot" + console.reset + "\n"
    s += console.cyan + "        demo_docking" + console.yellow + " --render" + console.reset + "\n"
    s += "\n"
    s += console.bold + "    Execute" + console.reset + "\n"
    s += console.cyan + "        demo_docking" + console.yellow + " [options]" + console.reset + "\n"
    s += "\n"
    s += console.white
    s += console.bold + "    Required Launchers" + console.reset + "\n"
    s += console.cyan + "        + minimal.launch" + console.reset + "\n"
    s += "\n"
    return s


def parse_arguments(command_line_args):
    parser = argparse.ArgumentParser(description=show_description(),
                                     usage=show_usage(),
                                     epilog="And his noodly appendage reached forth to tickle the blessed...",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter
                                     )
    parser.add_argument('-r', '--render', action='store_true', help='render the graph to dot/png/svg.')
    parser.add_argument('-d', '--debug', action='store_true', help='debug level tree logging.')

    args = parser.parse_args(command_line_args)
    return args

##############################################################################
# Tree
##############################################################################


class Demo(object):
    def __init__(self):
        self.gopher = gopher_configuration.Configuration(fallback_to_defaults=True)
        self.logger = py_trees.logging.get_logger("Demo Docking")

        self.root = py_trees.Sequence("Demo Docking")

        wait_to_be_docked = gopher_behaviours.battery.create_wait_to_be_docked(name="Wait to be Docked")
        auto_undock = gopher_behaviours.docking.DockingController(name="Auto UnDock", undock=True)
        auto_dock = gopher_behaviours.docking.DockingController(name="Auto Dock")

        ar_markers_on = gopher_behaviours.ar_markers.ControlARMarkerTracker("AR Markers On", self.gopher.topics.ar_tracker_long_range, True)
        ar_markers_off = gopher_behaviours.ar_markers.ControlARMarkerTracker("AR Markers Off", self.gopher.topics.ar_tracker_long_range, False)

        rotate_half_circle = gopher_behaviours.simple_motions.SimpleMotion(
            name="Rotate",
            motion_type=gopher_std_msgs.SimpleMotionGoal.MOTION_ROTATE,
            motion_amount=(math.pi),
            keep_trying_timeout=10.0
        )
        break_out = gopher_behaviours.simple_motions.SimpleMotion(
            name="Break Out",
            motion_type=gopher_std_msgs.SimpleMotionGoal.MOTION_TRANSLATE,
            motion_amount=0.5,
            keep_trying_timeout=10.0
        )

        self.root.add_child(wait_to_be_docked)
        self.root.add_child(ar_markers_on)
        self.root.add_child(auto_undock)
        self.root.add_child(break_out)
        self.root.add_child(rotate_half_circle)
        self.root.add_child(auto_dock)
        self.root.add_child(ar_markers_off)

        self.tree = py_trees.ROSBehaviourTree(self.root)
        rospy.on_shutdown(self.shutdown)
        py_trees.display.print_ascii_tree(self.root, 0)

    ##############################################################################
    # Tick Tock
    ##############################################################################

    def tick_tock(self):
        self.tree.visitors.append(py_trees.trees.DebugVisitor())
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            self.tree.tick(pre_tick_handler=self.pre_tick_handler)
            if self.root.status == py_trees.Status.FAILURE:
                rospy.logerr("Demo Docking: failed, %s" % self.root.tip().feedback_message)
            if self.root.status == py_trees.Status.SUCCESS:
                pass  # break
            rate.sleep()

    def pre_tick_handler(self, behaviour_tree):
        self.logger.debug("")
        self.logger.debug("{:-^30}".format(" Run %s " % behaviour_tree.count))
        self.logger.debug("")

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()

##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    command_line_args = rospy.myargv(argv=sys.argv)[1:]
    args = parse_arguments(command_line_args)
    if args.debug:
        py_trees.logging.level = py_trees.logging.Level.DEBUG

    demo = Demo()
    if args.render:
        py_trees.display.print_ascii_tree(demo.root, 0)
        py_trees.display.render_dot_tree(demo.root)
        sys.exit()

    rospy.init_node("demo", log_level=rospy.INFO)
    if not demo.tree.setup(5):
        sys.exit(console.red + "[ERROR] failed to setup required ros components." + console.reset)
    demo.tick_tock()
