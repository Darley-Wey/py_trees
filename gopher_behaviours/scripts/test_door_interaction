#!/usr/bin/env python

import rospy
import py_trees
import gopher_behaviours
from gopher_behaviours import moveit

class TestDoor(object):
    def __init__(self):
        self.root = py_trees.Sequence("runme", children=[moveit.OpenDoor("open"), moveit.CloseDoor("close")])
        self.tree = py_trees.ROSBehaviourTree(self.root)
        rospy.on_shutdown(self.shutdown)

    def spin(self):
        self.tree.visitors.append(gopher_behaviours.utilities.DebugVisitor())
        self.tree.tick_tock(sleep_ms=500, number_of_iterations=py_trees.CONTINUOUS_TICK_TOCK, pre_tick_handler=self.pre_tick_handler, post_tick_handler=self.post_tick_handler)

    def pre_tick_handler(self, behaviour_tree):
        pass

    def post_tick_handler(self, behaviour_tree):
        if self.root.status == py_trees.Status.SUCCESS:
            rospy.loginfo("Finished successfully")
            self.shutdown()
        pass

    def shutdown(self):
        self.tree.destroy()  # destroy the tree on shutdown to stop the behaviour
        self.tree.interrupt()


if __name__ == '__main__':
    rospy.init_node("door_test")
    t = TestDoor()
    t.spin()
